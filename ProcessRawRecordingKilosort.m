function ProcessRawRecordingKilosort(selDir, procConfig)
    % Processes the recording data
    
    % selDir points to a directory that contains the raw data acquired on
    % the intan with One File per Signal Type mode. To avoid conflicts 
    % between the currently selected folder and selDirs, the inputted 
    % directories should be entered as a full paths
    
    % The path should contain files acquired either with an Intan
    % evalulation board or neuropixel probes with SpikeGLX. Intan files will
    % contain neural data in the amplifier.dat file, while files from
    % SpikeGLX will have a '.imecX.' inside their name.
    % procConfig is a structure contains the settings for processing your 
    % data. Each field corresponds to a particular processing step. If you 
    % want to omit a step, then just don't include that field.
    % procConfig fields are:
    %   BaseName = a string, the base for all file names created
    %   RawRate = sample rate of the intan
    %   Intan2Datmap = Composed of a cell array that allows one to specify
    %       the naming in the chanMaps.
    %   NP2Datmap = Empty, no options specified. Identifies the recording file using
    %       the basename (excluding .ap.bin). If multiple probes are used,
    %       each should be run separately and have a different '.imecX.' 
    %       in the base name. When the Intan is also used, it should
    %       be run separately from the NP probes, with no '.imecX'.
    %   UnitFilter = A structure with the following fields
    %       MedianFilterWidth = integer
    %       RefGroups = list of numbers specifying how to group channels
    %           together when calculating the median reference signal. 
    %           Groups are integers greater than one. Zero is reserved for 
    %           channels that are to be excluded from the median 
    %           calculation.
    %   LFPFilter = A structure with the following fields
    %       CutoffFreq = low pass cutoff frequency, typically 300.
    %       ResampleRate = new sampling rate in Hz
    %   SpikeSort = A structure array that gives the arrangement of recording
    %   channels. It contains the following fields:
    %       SiteName: a string, the name of the recording site
    %     SiteChans: an Mx1 vector, start index of 1, the
    %     channels that go together for for a recording site
    %     XCoords: an Mx1 vector, the positions of the channels
    %     along the 'x-axis'
    %     YCoords: an Mx1 vector, the positions of the channels
    %     along the 'y-axis'
    %     KCoords: an Mx1 vector, the groups that recording sites
    %     belong to
    %   Klusters = A structure with the following fields:
    %       WaveformWindow = an integer, number of samples to use for spike 
    %           waveforms.
    %       PCNumber = an integer, number of principal components to
    %           calculate on each channel
    %   
    
    baseName = procConfig.BaseName;
    rawRate = procConfig.RawRate;
    
    isImec = contains(baseName, 'imec');

    if isfield(procConfig,'Intan2Datmap')
        if isImec
            error('Do not use Intan2Datmap with neuropixel probes');
        end
        chMapOptions = procConfig.Intan2Datmap;
        intan2datmap(selDir, baseName, chMapOptions{:})
    end
    
    if isfield(procConfig,'NP2Datmap')
        prb = regexp(baseName, 'imec([0-7])','tokens');
        prb = prb{1}{1};
        if isempty(procConfig.NP2Datmap)
            procConfig.NP2Datmap.ArtifactRemove = [];
        elseif isempty(procConfig.NP2Datmap.ArtifactRemove)
            procConfig.NP2Datmap.ArtifactRemove = [1 0 0.1];
        end
        artRem = procConfig.NP2Datmap.ArtifactRemove;
        np2datmap(selDir, baseName, prb, artRem)
        system(['del ' fullfile(selDir, [baseName '.ap.bin'])]);
    end
    
    if isfield(procConfig, 'UnitFilter')
        datFileName = fullfile(selDir, [baseName '.dat']);
        datProp = datinfo(datFileName);
        
        if isImec % Neuropixel probes processed here
            error('Unit filter does not run for Imec. A fil file is generated by np2datmap');
            % Eventually I may replace this with global common average
            % referencing via CatGT, but for now I will keep running our
            % old routine.
            %catGTCmdline0=<CatGT -dir=C:\Test\ -run=20-03-24_R6_PostMoveProbeDorsalApprox400um -g=0 -t=0,0 -no_run_fld -prb=0 -ap -aphipass=300 -aplopass=9000 -gbldmx -dest=D:\CurrentlyProcessing>
            %system(CATGT COMMANDS GO HERE)
            % find tcat file            
            %catGTFile = strrep(baseName, 't0', 'tcat');  
            %system(['rename ' remMedFName ' ' origFilName(1:(end-4)) '.fil']);
            %system(['copy ' baseName '_t.dat ' baseName '_t.fil']);
%             
%             medianFilterWidth = procConfig.UnitFilter.MedianFilterWidth;
%             refGroups = procConfig.UnitFilter.RefGroups;
%             UnitFilter(datFileName, datProp.ChannelCount, round(1/datProp.TimeStep), ...
%                 medianFilterWidth);
%             remMedFName = RemoveNoiseMedian([datFileName(1:(end-4)) '.fil'], datProp.ChannelCount, ...
%                 round(1/datProp.TimeStep), refGroups);
%             system(['del ' datFileName(1:(end-4)) '.fil']);
%             origFilName = split(datFileName,'\');
%             origFilName = origFilName{end};
%             system(['rename ' remMedFName ' ' origFilName(1:(end-4)) '.fil']);
            
            
        else % Intan data processed here
            medianFilterWidth = procConfig.UnitFilter.MedianFilterWidth;
            refGroups = procConfig.UnitFilter.RefGroups;
            UnitFilter(datFileName, datProp.ChannelCount, round(1/datProp.TimeStep), ...
                medianFilterWidth);
            remMedFName = RemoveNoiseMedian([datFileName(1:(end-4)) '.fil'], datProp.ChannelCount, ...
                round(1/datProp.TimeStep), refGroups);
            system(['del ' datFileName(1:(end-4)) '.fil']);
            origFilName = split(datFileName,'\');
            origFilName = origFilName{end};
            system(['rename ' remMedFName ' ' origFilName(1:(end-4)) '.fil']);
        end
    end
    
    
    if isfield(procConfig, 'LFPFilter')            
        datFileName = fullfile(selDir, [baseName '.dat']);
        datProp = datinfo(datFileName);
        cutoffFreq = procConfig.LFPFilter.CutoffFreq;
        resampleRate = procConfig.LFPFilter.ResampleRate;
        LFPFilter(datFileName, datProp.ChannelCount, round(1/datProp.TimeStep), ...
            cutoffFreq, resampleRate);
    end
    
    if isfield(procConfig,'SpikeSort')
        datFileName = fullfile(selDir, [baseName '.fil']);
        chanData = procConfig.SpikeSort;
        rezFiles = BatchKilosort3(selDir, datFileName, chanData);
        
        if isfield(procConfig, 'Klusters')
            datFileName = fullfile(selDir, [baseName '.fil']);
            datProp = datinfo(datFileName);
            chanData = procConfig.SpikeSort;
            waveWindow = procConfig.Klusters.WaveformWindow;
            pcNum = procConfig.Klusters.PCNumber;
            if isfield(procConfig,'LFPFilter')
                lfpSampRate = procConfig.LFPFilter.ResampleRate;
            else
                lfpSampRate = 1000;
            end
            CreateNDMXML(selDir, baseName, datProp.ChannelCount, ...
                round(1/datProp.TimeStep), lfpSampRate, chanData, waveWindow, pcNum);
            for j = 1:length(rezFiles)
                currRez = getfield(load(rezFiles{j}),'rez');
                if isfield(currRez, 'st3')
                    RezToKlusters(currRez, j, waveWindow, pcNum);
                end
            end
        end
    end
    
    